<?php

declare(strict_types=1);

/*
 * AgNciaVirtualV2Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace AgNciaVirtualV2Lib\Controllers;

use AgNciaVirtualV2Lib\Exceptions\ApiException;
use AgNciaVirtualV2Lib\ApiHelper;
use AgNciaVirtualV2Lib\ConfigurationInterface;
use AgNciaVirtualV2Lib\Http\HttpRequest;
use AgNciaVirtualV2Lib\Http\HttpResponse;
use AgNciaVirtualV2Lib\Http\HttpMethod;
use AgNciaVirtualV2Lib\Http\HttpContext;
use AgNciaVirtualV2Lib\Http\HttpCallBack;
use Unirest\Request;

class HOMOLOGAOController extends BaseController
{
    public function __construct(ConfigurationInterface $config, array $authManagers, ?HttpCallBack $httpCallBack)
    {
        parent::__construct($config, $authManagers, $httpCallBack);
    }

    /**
     * @param int $usuarioId
     * @param int $rotinaId
     * @param string $codigoEmpresa
     * @param \AgNciaVirtualV2Lib\Models\HMLObterTokenRequest $body
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function hMLObterToken(
        int $usuarioId,
        int $rotinaId,
        string $codigoEmpresa,
        \AgNciaVirtualV2Lib\Models\HMLObterTokenRequest $body
    ): void {
        //prepare query string for API call
        $_queryBuilder = '/token/obter';

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => BaseController::USER_AGENT,
            'content-type'  => 'application/json',
            'UsuarioId'       => $usuarioId,
            'RotinaId'        => $rotinaId,
            'CodigoEmpresa'   => $codigoEmpresa
        ];

        //json encode body
        $_bodyJson = Request\Body::Json($body);

        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        try {
            $response = Request::post($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders(), $_bodyJson);
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
    }

    /**
     * @param \AgNciaVirtualV2Lib\Models\HMLAutenticarClienteRequest $body
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function hMLAutenticarCliente(\AgNciaVirtualV2Lib\Models\HMLAutenticarClienteRequest $body): void
    {
        //prepare query string for API call
        $_queryBuilder = '/auth/autenticarCliente';

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => BaseController::USER_AGENT,
            'content-type'  => 'application/json'
        ];

        //json encode body
        $_bodyJson = Request\Body::Json($body);

        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        try {
            $response = Request::post($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders(), $_bodyJson);
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
    }

    /**
     * @param string $clientId
     * @param string $accessToken
     * @param int $protocolo
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function hMLBuscarSegundaVia(string $clientId, string $accessToken, int $protocolo): void
    {
        //prepare query string for API call
        $_queryBuilder = '/segundaVia/BuscarSegundaVia';

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => BaseController::USER_AGENT,
            'client_id'       => $clientId,
            'access_token'    => $accessToken,
            'protocolo'       => $protocolo
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
    }

    /**
     * @param string $clientId
     * @param string $accessToken
     * @param int $protocolo
     * @param int $seqOriginal
     * @param string $email
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function hMLEnviarEMailSegundaVia(
        string $clientId,
        string $accessToken,
        int $protocolo,
        int $seqOriginal,
        string $email
    ): void {
        //prepare query string for API call
        $_queryBuilder = '/segundaVia/EnviarEmailSegundaVia';

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => BaseController::USER_AGENT,
            'client_id'       => $clientId,
            'access_token'    => $accessToken,
            'protocolo'       => $protocolo,
            'seqOriginal'     => $seqOriginal,
            'email'           => $email
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
    }

    /**
     * @param string $clientId
     * @param string $accessToken
     * @param int $protocolo
     * @param int $seqOriginal
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function hMLGerarCDigoDeBarrasSegundaVia(
        string $clientId,
        string $accessToken,
        int $protocolo,
        int $seqOriginal
    ): void {
        //prepare query string for API call
        $_queryBuilder = '/segundaVia/GerarCodigoBarras';

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => BaseController::USER_AGENT,
            'client_id'       => $clientId,
            'access_token'    => $accessToken,
            'protocolo'       => $protocolo,
            'seqOriginal'     => $seqOriginal
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
    }

    /**
     * @param string $clientId
     * @param string $accessToken
     * @param int $protocolo
     * @param int $seqOriginal
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function hMLGerarSegundaVia(string $clientId, string $accessToken, int $protocolo, int $seqOriginal): void
    {
        //prepare query string for API call
        $_queryBuilder = '/segundaVia/GerarSegundaVia';

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => BaseController::USER_AGENT,
            'client_id'       => $clientId,
            'access_token'    => $accessToken,
            'protocolo'       => $protocolo,
            'seqOriginal'     => $seqOriginal
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
    }
}
